# -*- coding: utf-8 -*-
"""Класс Unit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1shZrNhvDQGD4b3YmSBrCzkS_-hxEsaVv
"""

# 1. Доделайте класс Unit, если не успели на занятии. Для метода атаки напишите докстринг.

import random

class GameObj:
  _name = ''
  _hp = 0

class Unit(GameObj):
  _power = 0
  _defence = 0
  _chance = 0.8

  def __init__(self, name, hp, att, defence):
  # check types here
    self._name = name
    if isinstance(hp, int) and hp > 0:
      self._hp = hp
    if isinstance(att, int):
      self._power = att
    if isinstance(defence, int) or isinstance(defence, float):
      self._defence = defence
    #self.__example = None
    
  def attack(self, enemy):
    """Method used to calculate new hp if types are equal"""
    if type(self) == type(enemy):
      enemy._hp -= (self._power - enemy._defence)

# 2. Добавьте в класс Unit атрибут, отвечающий за шанс (в процентах) для юнита нанести двойной урон во время атаки.
# Измените метод атаки, так, чтобы данная величина учитывалась при выполнении атаки. Рекомендую создать вычисляемый атрибут (property), 
# который бы отдавал готовую величину урона на основе силы атаки и шанса. хотя можете придумать механику сами)

  def attack_2(self, enemy):
    if type(self) == type(enemy):
      damage = self._power - enemy._defence
    if random.random() > self._chance:  
      enemy._hp -= 2*damage                              # - двойной урон во время атаки
    else: 
      enemy._hp -= damage                                # - урон во время атаки

a = Unit('Artur', 20, 3, 1.3)
b = Unit('Lancelot', 15, 5, 0.7)

help(Unit.attack)
print('--------')
print(a.attack.__doc__)
print('--------')

print('a', a._hp)
print('b', b._hp)

a.attack(b)                 
b.attack(a)                 
print('a', a._hp)
print('b', b._hp)
print('--------')

a.attack_2(b)               
b.attack_2(a)               
print('a', a._hp)
print('b', b._hp)
print('--------')